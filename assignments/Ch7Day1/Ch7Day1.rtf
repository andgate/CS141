{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\fswiss\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\froman\fprq0\fcharset128 Monospaced.plain;}{\f6\fnil\fprq2\fcharset0 DejaVu Sans;}{\f7\fnil\fprq2\fcharset0 Lohit Hindi;}{\f8\fnil\fprq0\fcharset128 Lohit Hindi;}}
{\colortbl;\red0\green0\blue0;\red148\green30\blue223;\red0\green203\blue0;\red250\green100\blue0;\red128\green128\blue128;}
{\stylesheet{\s0\snext0\nowidctlpar{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\kerning1\dbch\af6\langfe2052\dbch\af7\afs24\alang1081\loch\f3\fs24\lang1033 Normal;}
{\*\cs15\snext15 Numbering Symbols;}
{\s16\sbasedon0\snext17\sb240\sa120\keepn\dbch\af6\dbch\af7\afs28\loch\f4\fs28 Heading;}
{\s17\sbasedon0\snext17\sl288\slmult1\sb0\sa140 Text Body;}
{\s18\sbasedon17\snext18\sl288\slmult1\sb0\sa140\dbch\af8 List;}
{\s19\sbasedon0\snext19\sb120\sa120\noline\i\dbch\af8\afs24\ai\fs24 Caption;}
{\s20\sbasedon0\snext20\noline\dbch\af8 Index;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi-283\li707}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-283\li1414}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-283\li2121}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-283\li2828}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-283\li3535}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-283\li4242}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-283\li4949}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-283\li5656}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-283\li6363}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-432\li432}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-576\li576}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-720\li720}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-864\li864}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1008\li1008}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1152\li1152}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1296\li1296}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1440\li1440}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi-1584\li1584}\listid2}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}{\info{\creatim\yr2014\mo11\dy11\hr16\min51}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}{\comment LibreOffice}{\vern67241475}}\deftab720
\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt0 Default Style;}}
\formshade\paperh15840\paperw12240\margl1134\margr1134\margt1134\margb1134\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12240\pghsxn15840\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pgndec\pard\plain \s17\sl288\slmult1\sb0\sa140\sl288\slmult1\li0\ri0\lin0\rin0\fi0\sb0\sa0{\rtlch \ltrch\loch
Gabriel Anderson}
\par \pard\plain \s17\sl288\slmult1\sb0\sa140\sl288\slmult1\li0\ri0\lin0\rin0\fi0\sb0\sa0{\rtlch \ltrch\loch
CS&141, S1\line Chapter 7, Day 1}
\par \pard\plain \s17\sl288\slmult1\sb0\sa140\sl288\slmult1\li0\ri0\lin0\rin0\fi0\sb0\sa0\rtlch \ltrch\loch

\par \pard\plain \s17\sl288\slmult1\sb0\sa140{\listtext\pard\plain  1.\tab}\ilvl0\ls1 \li-709\ri0\lin-709\rin0\fi-283\tx-2\li-2\ri0\lin-2\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
p. 362 R7.2 total after loops \line }{\b\ab\rtlch \ltrch\loch
a. }{\rtlch \ltrch\loch
25\line }{\b\ab\rtlch \ltrch\loch
b. }{\rtlch \ltrch\loch
13\line }{\b\ab\rtlch \ltrch\loch
c. }{\rtlch \ltrch\loch
12\line }{\b\ab\rtlch \ltrch\loch
d. }{\rtlch \ltrch\loch
Throws an ArrayIndexOutOfBoundsException\line }{\b\ab\rtlch \ltrch\loch
e. }{\rtlch \ltrch\loch
11\line }{\b\ab\rtlch \ltrch\loch
f. }{\rtlch \ltrch\loch
25\line }{\b\ab\rtlch \ltrch\loch
g. }{\rtlch \ltrch\loch
12\line }{\b\ab\rtlch \ltrch\loch
h. }{\rtlch \ltrch\loch
-1\line }
\par \pard\plain \s17\sl288\slmult1\sb0\sa140{\listtext\pard\plain  2.\tab}\ilvl0\ls1 \li-709\ri0\lin-709\rin0\fi-283\tx-2\li-2\ri0\lin-2\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
p. 362 R7.6 what is wrong\line }{\b\ab\rtlch \ltrch\loch
a. }{\rtlch \ltrch\loch
Throws an ArrayIndexOutOfBounds exception because the for loop uses a lesser-than-or-equals-to sign, instead of a lesser-than-sign. Also, the loop starts at i=1, and it should probably be i=0 unless they have some reason for leaving values[0] in it's default initialization state of 0.\line \line }{\b\ab\rtlch \ltrch\loch
b.}{\b0\ab0\rtlch \ltrch\loch
 Jgrasp would cry \u8220\'93but Gabe-kun, you didn't initialize values-san, desu!\u8221\'94 To which I would respond \u8220\'93You're right, my mistake.\u8221\'94 Moral of the story, initialize your arrays before you use them please.\line }
\par \pard\plain \s17\sl288\slmult1\sb0\sa140{\listtext\pard\plain  3.\tab}\ilvl0\ls1 \li-709\ri0\lin-709\rin0\fi-283\tx-2\li-2\ri0\lin-2\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
p. 366 E7.2 various array methods (put all tests in one ArrayTester class) \line }{\b\ab\rtlch \ltrch\loch
ArrayMethods.java}{\rtlch \ltrch\loch
\line }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
class}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 ArrayMethods}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] values;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 ArrayMethods(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] initialValues)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      setValues(initialValues);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 setValues(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] newValues)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
this}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
.values = newValues.clone();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
  }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] getValues()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 values.clone();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String toString()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      String valuesStr = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
""}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 value : values)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         valuesStr += value + }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
" "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 valuesStr;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Problem (a)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 swapFirstAndLast()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 TMP = values[0];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 LAST = values.length - 1;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      values[0] = values[LAST];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      values[LAST] = TMP;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Problem (b)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 shiftRight()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 LAST = values.length - 1;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
     }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 TMP = values[LAST];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = LAST; i > 0; i--)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         values[i] = values[i-1];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      values[0] = TMP;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Problem (c)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 replaceEvenWithZero()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < values.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
     \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(values[i] % 2 == 0)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            values[i] = 0;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
        \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Problem (d)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Ignores first and last}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 replaceWithLargestNeighbor()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] tmp = values.clone();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 1; i < values.length - 1; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(values[i+1] < values[i-1])}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            tmp[i] = values[i-1];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
else}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            tmp[i] = values[i+1];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      values = tmp;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Problem (e)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 removeMiddle()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Return if no middle}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(values.length < 3)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Initialize as blank to avoid errors.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Values will get initialized.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] firstHalf = \{\};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] secondHalf = \{\};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// remove two from middle}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 firstHalfStart = 0;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 firstHalfEnd = values.length / 2;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 secondHalfStart = firstHalfEnd + 1;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 secondHalfEnd = values.length;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(isEven(values.length)) }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// even}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         firstHalfEnd -= 1;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
     firstHalf = getSection(values, firstHalfStart, firstHalfEnd);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      secondHalf = getSection(values, secondHalfStart, secondHalfEnd);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      values = append(firstHalf, secondHalf);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] append(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] a, }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] b)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] c = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[a.length + b.length];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < a.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         c[i] = a[i];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 offset = a.length;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < b.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         c[i + offset] = b[i];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
     }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 c;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] getSection(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] xs, }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 start, }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 end)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] section = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[end - start];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 offset = start;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 length = end - start;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         section[i] = xs[i + offset];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 section;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Problem (f)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 moveEvenToFront()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Return if no even or odd numbers}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(countEven() == 0 || countOdd() == 0)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] evenValues = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[countEven()];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] oddValues = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[countOdd()];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
     }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 even_i = 0;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 odd_i = 0;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < values.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(isEven(values[i]))}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            evenValues[even_i] = values[i];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            even_i++;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
else}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            oddValues[odd_i] = values[i];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            odd_i++;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      values = append(evenValues, oddValues);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 isEven(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 x)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 ((x % 2) == 0);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 countEven()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 counter = 0;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < values.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(isEven(values[i]))}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            counter++;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 counter;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 countOdd()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 (values.length - countEven());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Problem (g)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
  }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 secondLargest()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// If there is no second largest, just return zero.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(values.length <= 1)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 0;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 largest = Math.max(values[0], values[1]);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 secondLargest = Math.min(values[0], values[1]);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// starting on the third element}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 2; i < values.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
        }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(values[i] > largest)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            secondLargest = largest;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            largest = values[i];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 secondLargest;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// At this point, I've drank so much coffee}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// that I have to write detailed comments.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Problem (h)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 isIncreasingOrder()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Return true if list is}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// one or no elements.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(values.length <= 1)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
true}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// save the first element}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 last = values[0];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// start from the second}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 1; i < values.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// return false is the current element}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// is less than the last.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(values[i] < last)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Save the new last element}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         last = values[i];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
     }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// If survives the loop,}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// elements are in increasing order.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
true}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Problem (i)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 hasAdjecentDuplicates()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Return false if list is}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// one or no elements.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(values.length <= 1)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
        }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// save the first element}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 last = values[0];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// start from the second}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 1; i < values.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// return true is the current element}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// equals the last}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(values[i] == last)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
true}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Save the new last element}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         last = values[i];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// If the loops completes without returning,}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// then there were no adjecent elements.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Problem (j)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 hasDuplicates()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// When there is one or no}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// elements, there won't be any matches.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(values.length <= 1)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// This one requires comparing every element}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// in the array against every other element,}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// and returning true when a match is found.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Go up to the second to last value,}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// as there is no point in comparing}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// the last value to itself}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < values.length-1; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
     \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// j needs start off as the position}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// right after i, to avoid j == i,}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// and to avoid checking values that have}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// already been compared to everything else.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 j = i + 1; j < values.length; j++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// When a match is found,}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// return true.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(values[i] == values[j])}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
               }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
true}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// When all the elements were compared}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// and no match was found.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\}\line }{\rtlch \ltrch\loch
\line }{\b\ab\rtlch \ltrch\loch
ArrayTester.java}{\rtlch \ltrch\loch
\line }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
class}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 ArrayTester}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ECHO_A}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"A. Swap first and last"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_A = \{ 1, 2, 3, 4, 5\};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_A = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"5 2 3 4 1"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
  }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ECHO_B}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"B. Shift right"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_B = \{ 1, 2, 3, 4, 5 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_B = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"5 1 2 3 4"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ECHO_C}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"C. Replace even values with zero"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_C = \{ 1, 2, 3, 4, 5 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_C = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"1 0 3 0 5"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ECHO_D}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"D. Replace with largest neighbor"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_D = \{ 1, 2, 3, 2, 1 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_D = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"1 3 2 3 1"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ECHO_E}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"E. Remove middle"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
  }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_E_1 = \{ 1, 2, 3, 4, 5 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_E_2 = \{ 1, 2, 3, 4, 5, 6 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_E_1 = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"1 2 4 5"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_E_2 = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"1 2 5 6"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ECHO_F}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"F. Move even elements to front"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_F = \{ 1, 2, 3, 4, 5 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_F = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"2 4 1 3 5"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ECHO_G}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"G. Second largest element in the array"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_G = \{ 1, 2, 3, 4, 5 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_G = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"4"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ECHO_H}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"H. Is in increasing order?"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_H_1 = \{ 1, 2, 3, 4, 5 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_H_2 = \{ 1, 2, 3, 4, 1 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_H_1 = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"true"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_H_2 = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"false"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ECHO_I}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"I. Does array have adjecent duplicates?"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_I_1 = \{ 1, 2, 3, 4, 4 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
  }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_I_2 = \{ 1, 2, 3, 4, 5 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_I_1 = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"true"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_I_2 = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"false"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ECHO_J}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"J. Does the array have duplicates?"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_J_1 = \{ 1, 2, 3, 2, 5 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
  }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] INITIAL_VALUES_J_2 = \{ 1, 2, 3, 4, 5 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_J_1 = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"true"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_VALUES_J_2 = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"false"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 main(String[] args)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ECHO_A);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      ArrayMethods arrayMethods = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 ArrayMethods(INITIAL_VALUES_A);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.swapFirstAndLast();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_A);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ECHO_B);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.setValues(INITIAL_VALUES_B);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.shiftRight();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_B);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ECHO_C);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.setValues(INITIAL_VALUES_C);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.replaceEvenWithZero();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_C);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ECHO_D);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.setValues(INITIAL_VALUES_D);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.replaceWithLargestNeighbor();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_D);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
     }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ECHO_E);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.setValues(INITIAL_VALUES_E_1);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.removeMiddle();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_E_1);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
       }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.setValues(INITIAL_VALUES_E_2);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.removeMiddle();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_E_2);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ECHO_F);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
     arrayMethods.setValues(INITIAL_VALUES_F);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.moveEvenToFront();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_F);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ECHO_G);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.setValues(INITIAL_VALUES_G);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_G);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValue(arrayMethods.secondLargest());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ECHO_H);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.setValues(INITIAL_VALUES_H_1);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_H_1);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValue(arrayMethods.isIncreasingOrder());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.setValues(INITIAL_VALUES_H_2);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_H_2);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValue(arrayMethods.isIncreasingOrder());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ECHO_I);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.setValues(INITIAL_VALUES_I_1);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_I_1);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValue(arrayMethods.hasAdjecentDuplicates());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.setValues(INITIAL_VALUES_I_2);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_I_2);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValue(arrayMethods.hasAdjecentDuplicates());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ECHO_J);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.setValues(INITIAL_VALUES_J_1);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_J_1);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValue(arrayMethods.hasDuplicates());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      arrayMethods.setValues(INITIAL_VALUES_J_2);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printInitialValues(arrayMethods.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printExpectedValues(EXPECTED_VALUES_J_2);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printActualValue(arrayMethods.hasDuplicates());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 printExpectedValues(String expectedValues)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(}{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Expected values: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 + expectedValues);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 printExpectedValue(String expectedValue)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(}{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Expected value: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 + expectedValue);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 printActualValues(String values)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(}{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Actual values: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 + values);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 printActualValue(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 value)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(}{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Actual value: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 + value);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 printActualValue(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 value)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(}{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Actual value: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 + value);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 printInitialValues(String initialValues)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(}{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Initial values: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 + initialValues);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\}}{\rtlch \ltrch\loch
\line }
\par \pard\plain \s17\sl288\slmult1\sb0\sa140{\listtext\pard\plain  4.\tab}\ilvl0\ls1 \li-709\ri0\lin-709\rin0\fi-283\tx-2\li-2\ri0\lin-2\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
E7.7 reverse sequence of array elements \line }{\b\ab\rtlch \ltrch\loch
ReverseElements.java}{\rtlch \ltrch\loch
\line }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
class}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 ReverseElements}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String INITIAL_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Initial: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EXPECTED_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Expected: 11 9 4 7 9 16 9 4 1"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ACTUAL_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Actual: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;  }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
    }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 main(String[] args)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] values = \{ 1, 4, 9, 16, 9, 7, 4, 9, 11 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] reversed = reverseElements(values);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(INITIAL_ECHO + toString(values));}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(EXPECTED_ECHO);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ACTUAL_ECHO + toString(reversed));}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String toString(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] values)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      String valuesStr = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
""}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 value : values)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         valuesStr += value + }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
" "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 valuesStr;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] reverseElements(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] values)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] tmp = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[values.length];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < values.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 pos = values.length - i - 1;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         tmp[pos] = values[i];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 tmp;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\}}{\rtlch \ltrch\loch
\line }
\par \pard\plain \s17\sl288\slmult1\sb0\sa140{\listtext\pard\plain  5.\tab}\ilvl0\ls1 \li-709\ri0\lin-709\rin0\fi-283\tx-2\li-2\ri0\lin-2\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
E7.20 append, E7.}{\rtlch \ltrch\loch
21}{\rtlch \ltrch\loch
 merge\line }{\b\ab\rtlch \ltrch\loch
Sequence.java}{\rtlch \ltrch\loch
\line }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
import}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 java.util.ArrayList;}{\afs20\rtlch \ltrch\loch\fs20
\line \line }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
class}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 Sequence}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 ArrayList<Integer> values;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 Sequence()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      values = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 ArrayList<Integer>();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 add(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 n)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      values.add(n);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 get(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 values.get(i);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 size()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 values.size();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 Sequence append(Sequence other)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      Sequence newValues = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 Sequence();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
this}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
.size(); i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         newValues.add(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
this}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
.get(i));}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < other.size(); i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         newValues.add(other.get(i));}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 newValues;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 Sequence merge(Sequence other)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
  \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      Sequence newValues = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 Sequence();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 longest = Math.max(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
this}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
.size(), other.size());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < longest; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(i < }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
this}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
.size())}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            newValues.add(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
this}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
.get(i));}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
        }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(i < other.size())}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            newValues.add(other.get(i));}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 newValues;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   @Override}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String toString()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 values.toString();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\}}{\rtlch \ltrch\loch
\line \line }{\b\ab\rtlch \ltrch\loch
SequenceTester.java}{\rtlch \ltrch\loch
\line }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
class}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 SequenceTester}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] a_values}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = \{ 1, 4, 9, 16 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] b_values}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = \{ 9, 7, 4, 9, 11 \};}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String INITIAL_A_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Initial Sequence A: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String INITIAL_B_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Initial Sequence B: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String FINAL_A_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Final Sequence A: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String FINAL_B_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Final Sequence B: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String APPEND_EXPECTED_C_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Expected Squence C: [1, 4, 9, 16, 9, 7, 4, 9, 11]"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String MERGE_EXPECTED_C_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Expected Squence C: [1, 9, 4, 7, 9, 4, 16, 9, 11]"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ACTUAL_C_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Actual Squence C: "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String APPEND_TEST_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Append Test"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String MERGE_TEST_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Merge Test"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 main(String[] args)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      Sequence a = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 Sequence();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < a_values.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         a.add(a_values[i]);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      Sequence b = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 Sequence();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < b_values.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         b.add(b_values[i]);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(INITIAL_A_ECHO + a.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(INITIAL_B_ECHO + b.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(APPEND_TEST_ECHO);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      Sequence c = a.append(b);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(FINAL_A_ECHO + a.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(FINAL_B_ECHO + b.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(APPEND_EXPECTED_C_ECHO);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ACTUAL_C_ECHO + c.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      c = a.merge(b);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(MERGE_TEST_ECHO);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(FINAL_A_ECHO + a.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(FINAL_B_ECHO + b.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(MERGE_EXPECTED_C_ECHO);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(ACTUAL_C_ECHO + c.toString());}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\}}
\par \pard\plain \s17\sl288\slmult1\sb0\sa140\li-709\ri0\lin-709\rin0\fi0\sb0\sa0\rtlch \ltrch\loch

\par \pard\plain \s17\sl288\slmult1\sb0\sa140{\listtext\pard\plain  6.\tab}\ilvl0\ls1 \li-709\ri0\lin-709\rin0\fi-283\tx-2\li-2\ri0\lin-2\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
p. 370 P7.1 mark runs with parentheses ( ) \line }{\b\ab\rtlch \ltrch\loch
DieSimulator.java}{\rtlch \ltrch\loch
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
/**}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
   This program simulates casting a die twenty times.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
   Also, encases that runs in parenthesis.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
*/}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
class}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 DieSimulator}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[] casts = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
[20];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 main(String[] args)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      Die d = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 Die(6);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 (}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < casts.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{  }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         casts[i] = d.cast();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      printCasts();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
  }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 printCasts()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// This way is gross. Like, really gross.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
/*boolean inRun = false;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
      for (int i = 0; i < casts.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
         if (inRun)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            if (casts[i] != casts[i-1])}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
               inRun = false;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
               System.out.print(") ");}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            else}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
               System.out.print(" ");}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            System.out.print(casts[i]);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
         if(!inRun)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            if (casts[i] == casts[i+1])}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
               inRun = true;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
               System.out.print(" (");}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            else if (i != 0)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
               System.out.print(" ");}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
            System.out.print(casts[i]);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
        \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
      if(inRun)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
         System.out.print(")");}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}*/}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// I'm gonna do it in a way that doesn't completely suck.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < casts.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 distance = i + 1;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Thanks to the magic of}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// short-circuit logic,}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// this won't cause an}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// ArrayIndexOutOfBoundsException!}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
( (distance != casts.length)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
          && (casts[i] == casts[i+1]) )}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            System.out.print(}{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"("}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 + casts[i]);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
do}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
               i++;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
               distance = i + 1;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
               }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
               System.out.print(}{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
" "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 + casts[i]);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
while}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
( (distance < casts.length)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
                && (casts[i] == casts[i+1]) );}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
           System.out.print(}{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
")"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
else}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            System.out.print(casts[i]);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(distance != casts.length)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            System.out.print(}{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
" "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\}}{\rtlch \ltrch\loch
\line \line }{\b\ab\rtlch \ltrch\loch
Die.java}{\rtlch \ltrch\loch
\line }{\cf2\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
import}{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
 java.util.Random;}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line \line }{\cf4\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
/**}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf4\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   This class models a die that, when cast, lands on a random}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf4\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   face.}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf4\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
*/}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf2\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
class}{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
 Die}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
\{}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
 Random generator;}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
 sides;}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line \line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
/**}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf4\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
      Constructs a die with a given number of sides.}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf4\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
      @param s the number of sides, e.g. 6 for a normal die}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf4\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   */}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
 Die(}{\cf2\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
 s)}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
      sides = s;}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
      generator = }{\cf2\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
 Random();}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line \line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf4\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
/**}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf4\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
      Simulates a throw of the die}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf4\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
      @return the face of the die }{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf4\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   */}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
 cast()}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
 1 + generator.nextInt(sides);}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\b0\afs20\ab0\rtlch \ltrch\loch\fs20
\line }{\cf1\b0\afs20\ab0\rtlch \ltrch\loch\fs20\loch\f5
\}}{\rtlch \ltrch\loch
\line }
\par \pard\plain \s17\sl288\slmult1\sb0\sa140{\listtext\pard\plain  7.\tab}\ilvl0\ls1 \li-709\ri0\lin-709\rin0\fi-283\tx-2\li-2\ri0\lin-2\rin0\fi-283\sb0\sa0{\rtlch \ltrch\loch
(optional) p. 372 P7.6 tic-tac-toe}
\par \pard\plain \s17\sl288\slmult1\sb0\sa140\li-2\ri0\lin-2\rin0\fi0\sb0\sa0{\b\ab\rtlch \ltrch\loch
TicTacToe.java}{\rtlch \ltrch\loch
\line }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
import}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 java.util.Scanner;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
import}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 java.util.Random;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
import}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 java.util.InputMismatchException;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
import}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 java.util.NoSuchElementException;}{\afs20\rtlch \ltrch\loch\fs20
\line \line }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
class}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 TicTacToe}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String[][] board = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String[3][3];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 turn;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 PLAYER_1_TURN = 0;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 PLAYER_2_TURN = 1;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String PLAYER_1_MARK = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"O"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String PLAYER_2_MARK = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"X"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String UNMARKED = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
" "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String COLUMN_HEADER}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"  1   2   3  "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String CEILING}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
" _1_ _2_ _3_ "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String EMPTY_ROW}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"|   |   |   |"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String FLOOR}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"|___|___|___|"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String LEFT_WALL}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"|"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String SPACE = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
" "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String RIGHT_WALL}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
" |"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String CURRENT_TURN_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Current turn: Player "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ENTER_ROW_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Enter Row (1-3): "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ENTER_COLUMN_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Enter Column (1-3) : "}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String ALREADY_MARKED_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"That location is already marked."}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String GAME_TIED_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"The game has ended in a tie!"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String PLAYER_PREFIX}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Player #"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String HAS_WON_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
" has won the game!"}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
  }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String GOOD_BYE_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"\\nGoodbye."}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
final}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String INVALID_INPUT_ECHO}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      = }{\cf3\afs20\rtlch \ltrch\loch\fs20\loch\f5
"Invalid input. Please enter 1, 2, or 3."}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
public}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 main(String[] args)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      initializeBoard();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// player 1 goes first}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      turn = PLAYER_1_TURN;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      Scanner console = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
new}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 Scanner(System.in);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      gameLoop(console);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 initializeBoard()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < board.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 j = 0; j < board.length; j++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            board[i][j] = UNMARKED;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 gameLoop(Scanner in)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 isGameOver = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
while}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(!isGameOver)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         drawBoard();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// Do the next turn}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         turn(in);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(isThreeInARow())}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            win();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            isGameOver = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
true}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
else}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(isBoardFull())}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            tie();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            isGameOver = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
true}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
else}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            nextTurn();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
  }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 tie()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      drawBoard();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(GAME_TIED_ECHO);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 win()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      drawBoard();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 winner = turn + 1;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(PLAYER_PREFIX + winner + HAS_WON_ECHO);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 drawBoard()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(CEILING);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < board.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         System.out.println(EMPTY_ROW);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         System.out.print(i + 1);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 j = 0; j < board[i].length; j++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            System.out.print(SPACE + board[i][j] + RIGHT_WALL);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
        System.out.println();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         System.out.println(FLOOR);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 turn(Scanner in)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      sayTurn();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 isTurnOver = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
while}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(!isTurnOver)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         System.out.print(ENTER_ROW_ECHO);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 row = ask(in);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         System.out.print(ENTER_COLUMN_ECHO);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 column = ask(in);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         String mark = getCurrentMark();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(isMarked(row, column))}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            System.out.println(ALREADY_MARKED_ECHO);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
else}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            isTurnOver = markBoard(mark, row, column);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 sayTurn()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 playerNum = turn + 1;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(CURRENT_TURN_ECHO + playerNum);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 ask(Scanner in)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
while}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
true}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 pos = 0;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
try}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            pos = in.nextInt();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
catch}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(InputMismatchException e)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// let the loop take care of it}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
catch}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(NoSuchElementException e)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            forceQuit();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
catch}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(IllegalStateException e)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            forceQuit();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         pos -= 1;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(0 <= pos && pos < board.length)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 pos;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// No valid input was found,}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf4\afs20\rtlch \ltrch\loch\fs20\loch\f5
// so let the loop repeat.}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         System.out.println(INVALID_INPUT_ECHO);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 nextTurn()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(turn == PLAYER_1_TURN)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         turn = PLAYER_2_TURN;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
else}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         turn = PLAYER_1_TURN;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
  }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 String getCurrentMark()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(turn == PLAYER_1_TURN)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 PLAYER_1_MARK;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 PLAYER_2_MARK;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 markBoard(String mark, }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 row, }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 column)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(row >= board.length || row < 0)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(column >= board[row].length || column < 0)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      board[row][column] = mark;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
true}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 isMarked(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 row, }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 column)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 !board[row][column].equals(UNMARKED);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 isBoardFull()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < board.length; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 j = 0; j < board[i].length; j++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(!isMarked(i, j))}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
               }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
true}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 isThreeInARow()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{  }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 checkDownwardDiagonal()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
               || checkUpwardDiagonal()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
               || checkRows()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
               || checkColumns();}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 checkDownwardDiagonal()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      String first = board[0][0];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      String second = board[1][1];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      String third = board[2][2];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(first.equals(PLAYER_1_MARK) || first.equals(PLAYER_2_MARK))}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 first.equals(second) && second.equals(third);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 checkUpwardDiagonal()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      String first = board[0][2];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      String second = board[1][1];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      String third = board[2][0];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(first.equals(PLAYER_1_MARK) || first.equals(PLAYER_2_MARK))}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 first.equals(second) && second.equals(third);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 checkRows()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 found = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
     }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < board.length && !found; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         String first = board[i][0];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         String second = board[i][1];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         String third = board[i][2];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(first.equals(PLAYER_1_MARK) || first.equals(PLAYER_2_MARK))}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(first.equals(second) && second.equals(third))}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
               found = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
true}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 found;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 checkColumns()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
boolean}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 found = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
false}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
for}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(}{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
int}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 i = 0; i < board.length && !found; i++)}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
        String first = board[0][i];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         String second = board[1][i];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         String third = board[2][i];}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(first.equals(PLAYER_1_MARK) || first.equals(PLAYER_2_MARK))}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
if}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
(first.equals(second) && second.equals(third))}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
               found = }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
true}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
            \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
         \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
return}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 found;}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
private}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
static}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 }{\cf2\afs20\rtlch \ltrch\loch\fs20\loch\f5
void}{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
 forceQuit()}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \{}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.out.println(GOOD_BYE_ECHO);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
      System.exit(0);}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
   \}}{\afs20\rtlch \ltrch\loch\fs20
\line }{\cf1\afs20\rtlch \ltrch\loch\fs20\loch\f5
\}}
\par }